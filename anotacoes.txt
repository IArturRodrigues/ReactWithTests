usando jest {
   yarn add -D jest @types/jest @testing-library/react @testing-library/jest-dom @testing-library/user-event

   possíveis erros {
      usando jest.config.ts: talvez nao reconheça o ts-node instalado globalmente, para isso tem que instalar local como devDependence
      erro jest-environment-jsdom nao e instalado por padrão, tem que instalar junto: yarn add -D jest-environment-jsdom

      usando tspaths {
         tem que instalar o plugin vite-tsconfig-paths e nas configs do vite colocar {
            import tsconfigPaths from 'vite-tsconfig-paths';

            export default defineConfigs({
               plugins: [
                  ...,
                  tsconfigPaths() // opcional { root: '.' } dentro dos ()
               ]
            });
         }

         configurando o jest {
            tem que instalar a lib ts-jest, também para colocar nas configs de preset do jest
            usando tspaths {
               import { pathsToModuleNameMapper } from 'ts-jest';
               import { compilerOptions }from './tsconfig.json';

               export default {
                  ...,
                  moduleNameMapper: pathsToModuleNameMapper(compilerOptions.paths, { prefix: '<rootDir>' }),
                  ...,
                  preset: ts-jest,
                  ...
               }
            }
         }
      }

      nao reconhecendo funções do testing-library {
         criar arquivo setupTests.ts com  {
            // jest-dom adds custom jest matchers for asserting on DOM nodes.
            // allows you to do things like:
            // expect(element).toHaveTextContent(/react/i)
            // learn more: https://github.com/testing-library/jest-dom
            import '@testing-library/jest-dom';
         } na pasta src ou na raiz do projeto.

         depois disso ir nas configurações do jest {
            // jest.config.ts

            setupFilesAfterEnv: ['<rootDir>/path/to/setupFile.ext']
         }

         caso dê algum erro usando typescript colocar também o caminho do setup de testes no array de includes

         // caso nao funcionar tera que importar o @testing-library/jest-dom em todos os arquivos de teste
      }
   }
}

sobre testes {
   Cada teste deve testar apenas 1 funcionalidade, só deve falhar por um único motivo que é não cumprir o requisito do teste. Não tente fazer mais do que apenas 1 teste dentro de cada bloco.

   usando mocks (valores de mentira) {
      import valorASerMockado from 'caminho/ate/arquivo/para/mockar';

      jest.mock('caminho/ate/arquivo/para/mockar', () => {
         return {
            valorASerMockado: jest.fn() // diz que ele se comporta como uma função (somente quando o valor retornado pela função mockada nao for outra função)
         };
      });

      const mockFunção = jest.fn();

      jest.mock('path/to/file', () => {
         return {
            funçãoASerMockada: () => mockFunção // quando uma função retorna outra o mock deve ser feito dessa forma
         };
      });

      describe('testando algo', () => {
         beforeEach(() => {
            // quando o teste depende do mock ele deve ser o primeiro a ser executado.
            // ex quando uma lista precisa ser renderizada com 2 itens o mock deve vir antes da renderização.
            // isso para uma funcionalidade que nao tenha as opções de estado padrão do react.
            (valorASerMockado as jest.Mock).mockReturnValue(valorDesejadoParaOTeste);

            render(<Component />);
         });
         it('testando funcionalidade', () => {
            expect(algumaCoisa).toHaveLength(tamanhoDoArray);
         });
      });
   }

   escopo de testes {
      // arquivo.test.ts

      beforeEach(() => {
         // vai funcionar para todos os testes do arquivo
      });

      test('testando alguma coisa', () => {});

      describe('testando um conjunto de coisas', () => {
         beforeEach(() => {
            // vai funcionar somente para os testes dentro do describe
         });
      });
   }

   teste de snapshot {}
}