usando jest {
   yarn add -D jest @types/jest @testing-library/react @testing-library/jest-dom @testing-library/user-event

   possíveis erros {
      usando jest.config.ts: talvez nao reconheça o ts-node instalado globalmente, para isso tem que instalar local como devDependence
      erro jest-environment-jsdom nao e instalado por padrão, tem que instalar junto: yarn add -D jest-environment-jsdom

      usando tspaths {
         tem que instalar o plugin vite-tsconfig-paths e nas configs do vite colocar {
            import tsconfigPaths from 'vite-tsconfig-paths';

            export default defineConfigs({
               plugins: [
                  ...,
                  tsconfigPaths() // opcional { root: '.' } dentro dos ()
               ]
            });
         }

         configurando o jest {
            tem que instalar a lib ts-jest, também para colocar nas configs de preset do jest
            usando tspaths {
               import { pathsToModuleNameMapper } from 'ts-jest';
               import { compilerOptions }from './tsconfig.json';

               export default {
                  ...,
                  moduleNameMapper: pathsToModuleNameMapper(compilerOptions.paths, { prefix: '<rootDir>' }),
                  ...,
                  preset: ts-jest,
                  ...
               }
            }
         }
      }

      nao reconhecendo funções do testing-library {
         criar arquivo setupTests.ts com  {
            // jest-dom adds custom jest matchers for asserting on DOM nodes.
            // allows you to do things like:
            // expect(element).toHaveTextContent(/react/i)
            // learn more: https://github.com/testing-library/jest-dom
            import '@testing-library/jest-dom';
         } na pasta src ou na raiz do projeto.

         depois disso ir nas configurações do jest {
            // jest.config.ts

            setupFilesAfterEnv: ['<rootDir>/path/to/setupFile.ext']
         }

         caso dê algum erro usando typescript colocar também o caminho do setup de testes no array de includes

         // caso nao funcionar tera que importar o @testing-library/jest-dom em todos os arquivos de teste
      }
   }
}

sobre testes no jest {
   Cada teste deve testar apenas 1 funcionalidade, só deve falhar por um único motivo que é não cumprir o requisito do teste. Não tente fazer mais do que apenas 1 teste dentro de cada bloco.

   usando mocks (valores de mentira) {
      import valorASerMockado from 'caminho/ate/arquivo/para/mockar';

      jest.mock('caminho/ate/arquivo/para/mockar', () => {
         return {
            valorASerMockado: jest.fn() // diz que ele se comporta como uma função (somente quando o valor retornado pela função mockada nao for outra função)
         };
      });

      const mockFunção = jest.fn();

      jest.mock('path/to/file', () => {
         return {
            funçãoASerMockada: () => mockFunção // quando uma função retorna outra o mock deve ser feito dessa forma
         };
      });

      describe('testando algo', () => {
         beforeEach(() => {
            // quando o teste depende do mock ele deve ser o primeiro a ser executado.
            // ex quando uma lista precisa ser renderizada com 2 itens o mock deve vir antes da renderização.
            // isso para uma funcionalidade que nao tenha as opções de estado padrão do react.
            (valorASerMockado as jest.Mock).mockReturnValue(valorDesejadoParaOTeste);

            render(<Component />);
         });
         it('testando funcionalidade', () => {
            expect(algumaCoisa).toHaveLength(tamanhoDoArray);
         });
      });
   }

   escopo de testes {
      // arquivo.test.ts

      beforeEach(() => {
         // vai funcionar para todos os testes do arquivo
      });

      test('testando alguma coisa', () => {});

      describe('testando um conjunto de coisas', () => {
         beforeEach(() => {
            // vai funcionar somente para os testes dentro do describe
         });
      });
   }

   teste de snapshot {
      sao testes em que a biblioteca de testes tira uma "print" da tela e compara com os resultados esperados do teste
      quando precisar atualizar a snapshot pode rodar o comando padrão de testes com a flag --watch ou --updateSnapshot
   }

   não é possível fazer o teste com hooks diretamente, por isso precisamos tirar a função a ser testada de dentro do hook e transformá-la em uma função pura para assim podermos testar
   // usando @testing-library é possível fazer testes com hooks utilizando o método renderHook();

   links {
      renderizar hooks: https://testing-library.com/docs/react-testing-library/api/#renderhook
      lista de expectativas do jest: https://jestjs.io/pt-BR/docs/expect
   }
}

quando for subir o projeto pra vercel, tem uma forma de caso algum teste nao passe ele nao deve colocar essa nova versão no ar.
Para isso é preciso is nas configurações do projeto na vercel, mudar o comando de build para que ele seja primeiro o comando de testes e depois o de build


consultas com jest e @testing-library {
   Buscando elementos únicos:
      getBy
      queryBy
      findBy

   Buscando múltiplos elementos:
      getAllBy
      queryAllBy
      findAllBy

   exemplos de buscas {
      ByLabelText {
         getByLabelText, queryByLabelText, getAllByLabelText, queryAllByLabelText, findByLabelText, findAllByLabelText.

         É uma alternativa quando, por exemplo, temos múltiplos inputs no mesmo componente. Nesse caso, podemos buscar o input pelo label associado a ela. Confira a seguir boas práticas para esse cenário:
         html/jsx {
            <label for="email-input">E-mail</label>
            <input id="email-input" />

            <label id="email-label">E-mail</label>
            <input aria-labelledby="email-label" />

            <label>E-mail <input /></label>

            <label>
            <span>E-mail</span>
            <input />
            </label>

            <input aria-label="E-mail" />
         }
         Em qualquer um dos exemplos acima, podemos obter o input da seguinte forma:
         arquivo de test {
            const inputEmail = screen.getByLabelText(‘E-mail’);
         }
      }

      ByPlaceholderText {
         getByPlaceholderText, queryByPlaceholderText, getAllByPlaceholderText, queryAllByPlaceholderText, findByPlaceholderText, findAllByPlaceholderText

         Aqui, estamos falando do atributo do html, que também podemos utilizar para buscar os elementos:
         html/jsx {
            <input placeholder="E-mail" />
         }
         E para buscar:
         arquivo de test {
            const inputEmail = screen.getByPlaceholderText(‘E-mail’);
         }
      }

      ByText {
         getByText, queryByText, getAllByText, queryAllByText, findByText, findAllByText

         Agora, estamos falando do textContent dos elementos HTML. Então, para buscar uma âncora com essa marcação:
         html/jsx {
            <a href="/sobre">Sobre a Alura</a>
         }
         Escrevemos:
         arquivo de test {
            const ancoraSobre = screen.getByText(‘Sobre a Alura’);
         }
         É comum também o uso de Expressões Regulares para fazer buscas por texto. Essas expressões são tão poderosas e úteis que existe até um curso sobre elas.

         link do curso {
            https://www.alura.com.br/curso-online-expressoes-regulares
         }
      }

      ByDisplayValue {
         getByDisplayValue, queryByDisplayValue, getAllByDisplayValue, queryAllByDisplayValue, findByDisplayValue, findAllByDisplayValue

         Podemos utilizar essa query para encontrar elementos do tipo input, textarea, ou select.

         O “display value” é o valor em si do elemento.

         Se liga aqui no exemplo:
         html/jsx {
            <input type="text" id="nome" value=’'Agarikov'’ />
         }
         Agora com o valor preenchido, podemos realizar a query:
         arquivo de test {
            const nomeInput = screen.getByDisplayValue('Agarikov’);
         }
      }

      ByTestId {
         getByTestId, queryByTestId, getAllByTestId, queryAllByTestId, findByTestId, findAllByTestId

         Quando tudo mais falhar, podemos definir um atributo data-testid no elemento e utilizar esse tipo de query para encontrá-lo:
         html/jsx {
            <div data-testid="id-customizado" />
         }
         arquivo de test {
            const elemento = screen.getByTestId(‘id-customizado');
         }
         Mas fique atento a isto, pois aqui estamos sem valor semântico nenhum. Isso prejudica leitores de tela e demais softwares de acessibilidade.
      }
   }
}